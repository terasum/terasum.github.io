<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>前端 on CodeStack</title>
    <link>https://chenquan.me/tags/%E5%89%8D%E7%AB%AF/</link>
    <description>Recent content in 前端 on CodeStack</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 21 Aug 2017 11:38:10 +0000</lastBuildDate><atom:link href="https://chenquan.me/tags/%E5%89%8D%E7%AB%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lodash 源码分析（一）“Function” Methods</title>
      <link>https://chenquan.me/posts/lodash-source-code-analysis-1/</link>
      <pubDate>Mon, 21 Aug 2017 11:38:10 +0000</pubDate>
      
      <guid>https://chenquan.me/posts/lodash-source-code-analysis-1/</guid>
      <description>Lodash一直是我很喜欢用的一个库，代码也十分简洁优美，一直想抽时间好好分析一下Lodash的源代码。最近抽出早上的一些时间来分析一下Lodash的一些我觉得比较好的源码。因为函数之间可能会有相互依赖，所以不会按照文档顺序进行分析，而是根据依赖关系和简易程度由浅入深地进行分析。因为个人能力有限，如果理解有偏差，还请直接指出，以便我及时修改。
源码都是针对4.17.4版本的，源docs写得也很好，还有很多样例。
   _.after  _.after函数几乎是Lodash中最容易理解的一个函数了，它一共有两个参数，第一个参数是调用次数n,第二个参数是n次调用之后执行的函数func。
1 2 3 4 5 6 7 8 9 10 11  function after(n, func) { if (typeof func != &amp;#39;function&amp;#39;) { throw new TypeError(FUNC_ERROR_TEXT); } n = toInteger(n); return function() { if (--n &amp;amp;lt; 1) { return func.apply(this, arguments); } }; }   这个函数的核心代码就是：
1  func.apply(this,arguments);   但是一定要注意，这个函数中有闭包的应用，就是这个参数n。n本应该在函数_.after返回的时候就应该从栈空间回收，但事实上它还被返回的函数引用着，一直在内存中：
1 2 3 4 5  return function() { if (--n &amp;amp;lt; 1) { return func.</description>
    </item>
    
  </channel>
</rss>
