<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>函数式编程 on CodeStack</title>
    <link>https://chenquan.me/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</link>
    <description>Recent content in 函数式编程 on CodeStack</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 12 Aug 2017 10:23:31 +0000</lastBuildDate><atom:link href="https://chenquan.me/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>从Haskell、JS、go看函数式编程</title>
      <link>https://chenquan.me/posts/functional-programming-by-haskell-js-golang/</link>
      <pubDate>Sat, 12 Aug 2017 10:23:31 +0000</pubDate>
      
      <guid>https://chenquan.me/posts/functional-programming-by-haskell-js-golang/</guid>
      <description>本文就是我在学习函数式编程的过程当中自己体悟到的一些东西，这里将用go,JavaScript以及Haskell三种语言来分析函数式编程的一些奥秘。JavaScript由于具有的一些优势能够让我们可以实现函数式编程，而go作为一种强类型语言，虽然灵活性又稍有欠缺，但是也能够完成一些高阶函数的实现，Haskell语言作为正统的函数式编程语言，为了解释说明问题，作为对比参照。
   正文  函数式编程也算是经常看到了，它的一些优势包括：
 不包括赋值语句(assignment statement),一个变量一旦初始化，就无法被修改(immutable) 无副作用，函数除了计算结果，将不会产生任何副作用 因为无副作用，所以任何表达式在任何时候都能够evaluate  虽然上面的优势看看上去好像很厉害的样子，但是，到底厉害在哪里呢？我们可以通过下面的例子进行说明：
求和函数
Haskell
1 2 3 4  sum [1,2,3] -- 6 -- sum 的实现其实是 foldr (+) 0 [1,2,3]   在Haskell中flodr的函数定义是：
1  foldr :: Foldable t =&amp;amp;gt; (a -&amp;amp;gt; b -&amp;amp;gt; b) -&amp;amp;gt; b -&amp;amp;gt; t a -&amp;amp;gt; b   函数实现是:
1 2 3 4  -- if the list is empty, the result is the initial value z; else -- apply f to the first element and the result of folding the rest foldr f z [] = z foldr f z (x:xs) = f x (foldr f z xs)   这是一个递归实现，在函数式编程中，递归定义是十分常见的。</description>
    </item>
    
    <item>
      <title>Haskell — 你应该学的一门语言</title>
      <link>https://chenquan.me/posts/haskell-the-language-you-should-learn/</link>
      <pubDate>Wed, 09 Aug 2017 12:37:04 +0000</pubDate>
      
      <guid>https://chenquan.me/posts/haskell-the-language-you-should-learn/</guid>
      <description>三月的时候立下一个flag, 说是在一个月内学会haskell，现在已经8月了，终于有时间坐下来好好地看看haskell,一直以来我都执着于各种语言，现在已经掌握的语言包括: go, python, php, c, java, javascript, shell, 这些语言在不同的领域都是神兵利器，能够帮我解决不同的问题，但是haskell不一样，是一种我完全凭借兴趣去学习的语言。
刚开始看趣学指南的时候，觉得这门语言语法太奇怪了，我看得很难受。慢慢发现这其实是一种思维定势，如果我的第一门入门语言是haskell的话，想必就不是这种态度了。 Haskell是一门非常迷人的语言，它的列表推导式真的很厉害，能够解决原来传统过程式语言需要写很多代码才能解决的问题。它给了你另外一种思考问题的方式，开阔视野。
我觉得既然是计算机从业者，都应该去学学python和haskell两门语言，python将教会你什么如何让世界变美好，Haskell将告诉你这个世界是多么奇妙。如果你现在被冯·诺依曼式的架构侵染太深的话，学学Haskell吧，它会告诉你这世界上还有这样写代码的方式。
   书籍  最棒的haskell免费入门书 haskell趣学指南
   视频  下面是两小时入门haskell的内容，视频我也贴在下面了，但直接访问不了，你懂的。
   讲义  下面是我翻译过的视频随堂讲义内容：
askell 是一种函数式编程语言 -- 在Haskell 中所有的值都是immutable 的，所以一旦一个变量被赋值之后，它就不会改变了 -- 函数可以作为另一个函数的参数 -- 递归函数在hankell中很普遍 -- Haskell没有for.</description>
    </item>
    
  </channel>
</rss>
